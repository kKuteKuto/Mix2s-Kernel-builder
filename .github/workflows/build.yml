name: "Build kernels"

env:
  OUT_DIR: "${{ github.workspace }}/out"
  KERNEL_SU_NEXT_BRANCH: "next-susfs" # Define branch once
  SUSFS_BRANCH: "kernel-4.9"

on:
  workflow_dispatch:

jobs:
  Set-repos:
    name: "Parse repos.json and Set Build Date"
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.generate-matrix.outputs.repos }}
      builddate: ${{ steps.generate-builddate.outputs.builddate }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3

      - name: "Generate Matrix from repos.json"
        id: generate-matrix
        run: |
          echo "repos<<EOF" >> $GITHUB_OUTPUT
          jq -s '[.[][]]' repos/repos*.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: "Set Build Date"
        id: generate-builddate
        run: echo "builddate=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "Build kernel - ${{ matrix.repos.kernelSource.name }}"
    runs-on: ubuntu-latest
    needs:
      - Set-repos
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        repos: ${{ fromJSON(needs.Set-repos.outputs.repos) }}
    env:
      WORKSPACE: ${{ github.workspace }}
      BUILDDATE: "${{ needs.Set-repos.outputs.builddate }}"
      KERNEL_NAME: ${{ matrix.repos.kernelSource.name }}
      KERNEL_REPO: ${{ matrix.repos.kernelSource.repo }}
      KERNEL_BRANCH: ${{ matrix.repos.kernelSource.branch }}
      KERNEL_DEVICE: ${{ matrix.repos.kernelSource.device }}
      DEFCONFIG_NAME: ${{ matrix.repos.kernelSource.defconfig }}
      WITH_KERNELSU: ${{ matrix.repos.withKernelSU }}
      CCACHE_ENABLED: ${{ matrix.repos.ccache }}
      USE_ANYKERNEL: ${{ matrix.repos.AnyKernel3.use }}
      RELEASE_ENABLED: ${{ matrix.repos.AnyKernel3.release }}
      ANYKERNEL_PARAMS: ${{ toJSON(matrix.repos.AnyKernel3) }}
    steps:
      - name: "Install Prerequisites"
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends build-essential bc gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libssl-dev libfl-dev
          sudo apt-get install -y --no-install-recommends curl git ftp lftp wget libarchive-tools ccache python3 python3-dev
          sudo apt-get install -y --no-install-recommends zip unzip tar gzip bzip2 rar unrar

      - name: "Create ccache Key"
        if: ${{ env.CCACHE_ENABLED == 'true' }}
        id: ccache_key
        run: |
          ccache -o compression=false -o cache_dir=$HOME/.ccache
          echo "CACHE_KEY=$(echo -n '${{ toJSON(matrix.repos) }}' | base64 -w 0 | cut -c -48)" >> $GITHUB_OUTPUT

      - name: "Cache ccache Files"
        if: ${{ env.CCACHE_ENABLED == 'true' }}
        uses: actions/cache@v3
        with:
          path: |
            ~/.ccache
            ${{ env.OUT_DIR }}
          key: ccache-${{ env.KERNEL_NAME }}-${{ steps.ccache_key.outputs.CACHE_KEY }}-${{ env.BUILDDATE }}
          restore-keys: |
            ccache-${{ env.KERNEL_NAME }}-${{ steps.ccache_key.outputs.CACHE_KEY }}-${{ env.BUILDDATE }}

      - name: "Setup AnyKernel3"
        run: |
          echo "Cloning AnyKernel3 and SUSFS..."
          ANYKERNEL_REPO=$(echo "$ANYKERNEL_PARAMS" | jq -r ".repo")
          ANYKERNEL_BRANCH=$(echo "$ANYKERNEL_PARAMS" | jq -r ".branch")
          git clone --recursive --depth=1 -j $(nproc) --branch "$ANYKERNEL_BRANCH" "$ANYKERNEL_REPO" AnyKernel3
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "${{ env.SUSFS_BRANCH }}"
          echo "Setup AnyKernel3 => ($ANYKERNEL_REPO)"

      - name: "Clone Kernel Source"
        run: |
          git clone --recursive --depth=1 -j $(nproc) --branch "$KERNEL_BRANCH" "$KERNEL_REPO" "$KERNEL_NAME"
          echo "Cloned kernel source from $KERNEL_REPO"

      - name: "Get toolchains"
        env:
          toolchains: "${{ toJSON(matrix.repos.toolchains) }}"
        run: |
          toolchains_num="$(echo $toolchains | jq 'length')"
          echo "There is $toolchains_num defined toolchains."
          for ((i=0;i<toolchains_num;i++)); do
            toolchain_name=$(echo $toolchains | jq -r ".[$i].name")
            # Github
            toolchain_repo=$(echo $toolchains | jq -r ".[$i].repo")
            toolchain_branch=$(echo $toolchains | jq -r ".[$i].branch")
            # From archive
            toolchain_url=$(echo $toolchains | jq -r ".[$i].url")
            
            echo $toolchain_url
            if [ -z "${toolchain_url:-}" ] || [ "$toolchain_url" = "null" ];  then
              git clone --recursive --depth=1 -j $(nproc) --branch $toolchain_branch $toolchain_repo $toolchain_name
              echo "Clone $toolchain_name => ($toolchain_repo)"
            else
              wget "$toolchain_url"
              filename="${toolchain_url##*/}"
              mkdir -p $toolchain_name
              case "$filename" in
                *.zip)
                  unzip -d $toolchain_name "$filename"
                  ;;
                *.tar)
                  tar xvf "$filename" -C $toolchain_name
                  ;;
                *.tar.gz)
                  tar zxvf "$filename" -C $toolchain_name
                  ;;
                *.rar)
                  unrar x "$filename" $toolchain_name
                  ;;
                *)
                  echo "unknown file type: $filename"
                  ;;
              esac
              rm $filename
            fi

            jq -r ".[$i].binPath[] | tostring" <<< "$toolchains" | while read -r bin_path; do
              echo "$WORKSPACE/$toolchain_name/$bin_path" >> $GITHUB_PATH
            done
          done
      
      - name: "Set Build Arguments"
        id: generate-args
        env:
          PARAMS: "${{ toJSON(matrix.repos.params) }}"
          THREAD: $(nproc --all)
        run: |
          echo "PATH Variable: $PATH"
          ARCH=$(echo "$PARAMS" | jq -r ".ARCH")
          CC=$(echo "$PARAMS" | jq -r ".CC")
          args="-j${THREAD}"
          if [ -n "${OUT_DIR}" ]; then
            mkdir -p "${OUT_DIR}" && args="$args O=${OUT_DIR}"
          fi
          if [ -n "$ARCH" ]; then
            args="$args ARCH=$ARCH"
          fi
          if [ -n "$CC" ]; then
            if [[ "$CC" == *"/"* ]]; then
              CC="${WORKSPACE}/$CC"
            fi
            if [ "${CCACHE_ENABLED}" = "true" ]; then
              args="$args CC=\"ccache $CC\""
            else
              args="$args CC=$CC"
            fi
          fi
          # Process any external commands
          mapfile -t external_commands < <(jq -r '.externalCommand | to_entries[] | "\(.key)=\(.value)"' <<< "$PARAMS")
          for command in "${external_commands[@]}"; do
            key=$(echo "$command" | cut -d= -f1)
            value=$(echo "$command" | cut -d= -f2)
            if [[ "$value" == *"/"* ]]; then
              value="${WORKSPACE}/$value"
            fi
            args="$args $key=$value"
          done
          echo "args=$args" >> $GITHUB_OUTPUT
          echo "ARCH=$ARCH" >> $GITHUB_OUTPUT
      
      - name: "Apply SUSFS Patches"
        working-directory: ${{ env.KERNEL_NAME }}
        run: |
          echo "Applying SUSFS patches..."
          # Assume the patches reside in a subdirectory named "KernelSU-Next" within the kernel source.
          if [ -d "KernelSU-Next" ]; then
            cd KernelSU-Next
            patch -p1 --forward < 10_enable_susfs_for_ksu.patch || true
            cd ..
          fi
          # Apply additional patch (adjust the patch fileâ€™s relative path as needed)
          patch -p1 < 50_add_susfs_in_kernel-4.9.patch || true
     
      - name: "Add SUSFS Configuration Settings"
        working-directory: ${{ env.KERNEL_NAME }}
        run: |
          echo "Adding SUSFS configuration settings..."
          # Use the ARCH value from the previous step (make sure your params provide ARCH)
          CONFIG_FILE="arch/${{ steps.generate-args.outputs.ARCH }}/configs/${DEFCONFIG_NAME}"
          echo "CONFIG_KSU=y" | sudo tee -a "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS=y" | sudo tee -a "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" | sudo tee -a "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" | sudo tee -a "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" | sudo tee -a "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" | sudo tee -a "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" | sudo tee -a "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" | sudo tee -a "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=y" | sudo tee -a "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" | sudo tee -a "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" | sudo tee -a "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" | sudo tee -a "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" | sudo tee -a "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" | sudo tee -a "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" | sudo tee -a "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" | sudo tee -a "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_SU=y" | sudo tee -a "$CONFIG_FILE"
          echo "CONFIG_TMPFS_XATTR=y" | sudo tee -a "$CONFIG_FILE"

      - name: "Update KernelSU"
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          ARCH: ${{ steps.generate-args.outputs.ARCH }}
        if: ${{ env.WITH_KERNELSU == 'true' }}
        run: |
          echo "Setting up KernelSU..."
          # Remove any existing directories to avoid conflicts
          [ -d "KernelSU" ] && rm -rf "KernelSU"
          [ -d "drivers/kernelsu" ] && rm -rf "drivers/kernelsu"
          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/${{ env.KERNEL_SU_NEXT_BRANCH }}/kernel/setup.sh" | bash -s ${{ env.KERNEL_SU_NEXT_BRANCH }}
          CONFIG_FILE="arch/${ARCH}/configs/${DEFCONFIG_NAME}"
          echo "CONFIG_KPROBES=y" | sudo tee -a "$CONFIG_FILE"
          echo "CONFIG_HAVE_KPROBES=y" | sudo tee -a "$CONFIG_FILE"
          echo "CONFIG_KPROBE_EVENTS=y" | sudo tee -a "$CONFIG_FILE"
          echo "Final Config File:"
          cat "$CONFIG_FILE"

      - name: "Make defconfig"
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          ARGS: ${{ steps.generate-args.outputs.args }}
        run: |
          echo "Making defconfig with ARGS: ${ARGS}"
          make ${ARGS} ${DEFCONFIG_NAME}

      - name: "Build Kernel"
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          ARGS: ${{ steps.generate-args.outputs.args }}
        run: |
          echo "Building Kernel with ARGS: ${ARGS}"
          make ${ARGS}

      - name: "Prepare AnyKernel3 (if enabled)"
        if: ${{ env.USE_ANYKERNEL == 'true' }}
        run: |
          echo "Preparing AnyKernel3..."
          mkdir -p AnyKernel3/files
          cp "${{ env.OUT_DIR }}/arch/${{ steps.generate-args.outputs.ARCH }}/boot/Image" AnyKernel3/
          cp "${{ env.OUT_DIR }}/arch/${{ steps.generate-args.outputs.ARCH }}/boot/Image.gz-dtb" AnyKernel3/
          cp "${{ env.OUT_DIR }}/arch/${{ steps.generate-args.outputs.ARCH }}/boot/dtbo" AnyKernel3/
          cp "${{ env.OUT_DIR }}/arch/${{ steps.generate-args.outputs.ARCH }}/boot/dtbo.img" AnyKernel3/

      - name: "Pack AnyKernel3.zip (if enabled)"
        if: ${{ env.USE_ANYKERNEL == 'true' }}
        run: |
          cd AnyKernel3/
          zip -q -r "../${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}_${{ env.BUILDDATE }}.zip" *

      - name: "Upload Artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}_${{ env.BUILDDATE }}"
          path: |
            ${{ env.OUT_DIR }}/arch/${{ steps.generate-args.outputs.ARCH }}/boot/Image
            ${{ env.OUT_DIR }}/arch/${{ steps.generate-args.outputs.ARCH }}/boot/Image.gz-dtb
            ${{ env.OUT_DIR }}/arch/${{ steps.generate-args.outputs.ARCH }}/boot/dtb
            ${{ env.OUT_DIR }}/arch/${{ steps.generate-args.outputs.ARCH }}/boot/dtbo.img
            ${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}_${{ env.BUILDDATE }}.zip
          if-no-files-found: ignore
          retention-days: 7

      - name: "Create GitHub Release (if enabled)"
        if: ${{ env.USE_ANYKERNEL == 'true' && env.RELEASE_ENABLED == 'true' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.BUILDDATE }}.${{ github.run_number }}
          files: "${{ env.WORKSPACE }}/${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}_${{ env.BUILDDATE }}.zip"
          generate_release_notes: true
          
