name: "Build kernels"

env:
  OUT_DIR: "${{ github.workspace }}/out"
  KERNEL_SU_NEXT_BRANCH: "next-susfs"
  SUSFS_BRANCH: "kernel-4.9"

on:
  workflow_dispatch:

jobs:
  Set-repos:
    name: "Parse repos.json and Set Build Date"
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.matrix.outputs.repos }}
      builddate: ${{ steps.builddate.outputs.builddate }}
    steps:
      - uses: actions/checkout@v3

      - id: matrix
        name: "Generate Matrix from repos.json"
        run: |
          echo "repos<<EOF" >> $GITHUB_OUTPUT
          jq -s '[.[][]]' repos/repos*.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - id: builddate
        name: "Set Build Date"
        run: echo "builddate=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "Build kernel - ${{ matrix.repos.kernelSource.name }}"
    runs-on: ubuntu-latest
    needs: [Set-repos]
    strategy:
      matrix:
        repos: ${{ fromJSON(needs.Set-repos.outputs.repos) }}
      max-parallel: 4
      fail-fast: false
    env:
      WORKSPACE: ${{ github.workspace }}
      BUILDDATE: "${{ needs.Set-repos.outputs.builddate }}"
      KERNEL_NAME: ${{ matrix.repos.kernelSource.name }}
      KERNEL_REPO: ${{ matrix.repos.kernelSource.repo }}
      KERNEL_BRANCH: ${{ matrix.repos.kernelSource.branch }}
      KERNEL_DEVICE: ${{ matrix.repos.kernelSource.device }}
      DEFCONFIG_NAME: ${{ matrix.repos.kernelSource.defconfig }}
      WITH_KERNELSU: ${{ matrix.repos.withKernelSU }}
      CCACHE_ENABLED: ${{ matrix.repos.ccache }}
      USE_ANYKERNEL: ${{ matrix.repos.AnyKernel3.use }}
      RELEASE_ENABLED: ${{ matrix.repos.AnyKernel3.release }}
      ANYKERNEL_PARAMS: ${{ toJSON(matrix.repos.AnyKernel3) }}
    steps:
      - name: "Install Prerequisites"
        run: |
          sudo apt-get update && sudo apt-get install -y --no-install-recommends \
            build-essential bc gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi \
            libssl-dev libfl-dev curl git ftp lftp wget libarchive-tools \
            ccache python3 python3-dev zip unzip tar gzip bzip2 rar unrar

      - name: "Create ccache Key"
        if: ${{ env.CCACHE_ENABLED == 'true' }}
        id: ccache_key
        run: |
          ccache -o compression=false -o cache_dir=$HOME/.ccache
          echo "CACHE_KEY=$(echo -n '${{ toJSON(matrix.repos) }}' | base64 -w 0 | cut -c -48)" >> $GITHUB_OUTPUT

      - name: "Cache ccache Files"
        if: ${{ env.CCACHE_ENABLED == 'true' }}
        uses: actions/cache@v3
        with:
          path: |
            ~/.ccache
            ${{ env.OUT_DIR }}
          key: ccache-${{ env.KERNEL_NAME }}-${{ steps.ccache_key.outputs.CACHE_KEY }}-${{ env.BUILDDATE }}

      - name: "Setup AnyKernel3"
        run: |
          ANYKERNEL_REPO=$(echo "$ANYKERNEL_PARAMS" | jq -r ".repo")
          ANYKERNEL_BRANCH=$(echo "$ANYKERNEL_PARAMS" | jq -r ".branch")
          git clone --recursive --depth=1 -j $(nproc) --branch "$ANYKERNEL_BRANCH" "$ANYKERNEL_REPO" AnyKernel3
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "${{ env.SUSFS_BRANCH }}"

      - name: "Clone Kernel Source"
        run: |
          git clone --recursive --depth=1 -j $(nproc) --branch "$KERNEL_BRANCH" "$KERNEL_REPO" "$KERNEL_NAME"

      - name: "Get toolchains"
        env:
          toolchains: "${{ toJSON(matrix.repos.toolchains) }}"
        run: |
          num=$(echo $toolchains | jq 'length')
          for i in $(seq 0 $((num-1))); do
            name=$(echo $toolchains | jq -r ".[$i].name")
            repo=$(echo $toolchains | jq -r ".[$i].repo")
            branch=$(echo $toolchains | jq -r ".[$i].branch")
            url=$(echo $toolchains | jq -r ".[$i].url")
            if [ -z "$url" ] || [ "$url" = "null" ]; then
              git clone --recursive --depth=1 -j $(nproc) --branch $branch $repo $name
            else
              wget "$url"
              file="${url##*/}"
              mkdir -p $name
              case "$file" in
                *.zip)    unzip -d $name "$file" ;;
                *.tar)    tar xvf "$file" -C $name ;;
                *.tar.gz) tar zxvf "$file" -C $name ;;
                *.rar)    unrar x "$file" $name ;;
                *)        echo "unknown file type: $file" ;;
              esac
              rm $file
            fi
            jq -r ".[$i].binPath[]" <<< "$toolchains" | while read -r bp; do
              echo "$WORKSPACE/$name/$bp" >> $GITHUB_PATH
            done
          done

      - name: "Set Build Arguments"
        id: generate-args
        env:
          PARAMS: "${{ toJSON(matrix.repos.params) }}"
        run: |
          THREAD=$(nproc --all)
          ARCH=$(echo "$PARAMS" | jq -r ".ARCH")
          CC=$(echo "$PARAMS" | jq -r ".CC")
          args="-j${THREAD} O=${OUT_DIR} ARCH=$ARCH"
          if [ -n "$CC" ]; then
            [[ "$CC" == */* ]] && CC="${WORKSPACE}/$CC"
            if [ "${CCACHE_ENABLED}" = "true" ]; then
              args="$args CC=\"ccache $CC\""
            else
              args="$args CC=$CC"
            fi
          fi
          mapfile -t cmds < <(jq -r '.externalCommand | to_entries[] | "\(.key)=\(.value)"' <<< "$PARAMS")
          for cmd in "${cmds[@]}"; do
            key=${cmd%%=*}
            val=${cmd#*=}
            [[ "$val" == */* ]] && val="${WORKSPACE}/$val"
            args="$args $key=$val"
          done
          echo "args=$args" >> $GITHUB_OUTPUT
          echo "ARCH=$ARCH" >> $GITHUB_OUTPUT

      - name: "Add KernelSU"
        working-directory: ${{ env.KERNEL_NAME }}
        run: |        
          echo "Adding KernelSU..."
          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next-susfs/kernel/setup.sh" | bash -s next-susfs
          [ -d "KernelSU" ] && (cd KernelSU/kernel)
          sed -i 's/ccflags-y += -DKSU_VERSION=16/ccflags-y += -DKSU_VERSION=12000/' ./Makefile

      - name: "Apply SUSFS Patches"
        working-directory: ${{ env.KERNEL_NAME }}
        run: |
          [ -d "KernelSU" ] && (cd KernelSU && patch -p1 < 10_enable_susfs_for_ksu.patch || true)
          patch -p1 < 50_add_susfs_in_kernel-4.9.patch || true
     
      - name: "Add SUSFS Config"
        working-directory: ${{ env.KERNEL_NAME }}
        run: |
          CONFIG_FILE="arch/${{ steps.generate-args.outputs.ARCH }}/configs/${DEFCONFIG_NAME}"
          for cfg in "CONFIG_KSU=y" "CONFIG_KSU_SUSFS=y" "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" \
                     "CONFIG_KSU_SUSFS_SUS_PATH=y" "CONFIG_KSU_SUSFS_SUS_MOUNT=y" \
                     "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" \
                     "CONFIG_KSU_SUSFS_SUS_KSTAT=y" "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=y" \
                     "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" \
                     "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" "CONFIG_KSU_SUSFS_ENABLE_LOG=y" \
                     "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" \
                     "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" "CONFIG_KSU_SUSFS_SUS_SU=y" "CONFIG_TMPFS_XATTR=y"; do
            echo "$cfg" | sudo tee -a "$CONFIG_FILE"
          done

      - name: "Update KernelSU"
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          ARCH: ${{ steps.generate-args.outputs.ARCH }}
        if: ${{ env.WITH_KERNELSU == 'true' }}
        run: |
          [ -d "KernelSU" ] && rm -rf "KernelSU"
          [ -d "drivers/kernelsu" ] && rm -rf "drivers/kernelsu"
          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/${{ env.KERNEL_SU_NEXT_BRANCH }}/kernel/setup.sh" | bash -s ${{ env.KERNEL_SU_NEXT_BRANCH }}
          CONFIG_FILE="arch/${ARCH}/configs/${DEFCONFIG_NAME}"
          for cfg in "CONFIG_KPROBES=y" "CONFIG_HAVE_KPROBES=y" "CONFIG_KPROBE_EVENTS=y"; do
            echo "$cfg" | sudo tee -a "$CONFIG_FILE"
          done
          cat "$CONFIG_FILE"

      - name: "Make defconfig"
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          ARGS: ${{ steps.generate-args.outputs.args }}
        run: make ${ARGS} ${DEFCONFIG_NAME}

      - name: "Build Kernel"
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          ARGS: ${{ steps.generate-args.outputs.args }}
        run: make ${ARGS}

      - name: "Prepare AnyKernel3"
        if: ${{ env.USE_ANYKERNEL == 'true' }}
        run: |
          mkdir -p AnyKernel3/files
          cp "${{ env.OUT_DIR }}/arch/${{ steps.generate-args.outputs.ARCH }}/boot/Image" AnyKernel3/
          cp "${{ env.OUT_DIR }}/arch/${{ steps.generate-args.outputs.ARCH }}/boot/Image.gz-dtb" AnyKernel3/
          cp "${{ env.OUT_DIR }}/arch/${{ steps.generate-args.outputs.ARCH }}/boot/dtbo" AnyKernel3/
          cp "${{ env.OUT_DIR }}/arch/${{ steps.generate-args.outputs.ARCH }}/boot/dtbo.img" AnyKernel3/

      - name: "Pack AnyKernel3.zip"
        if: ${{ env.USE_ANYKERNEL == 'true' }}
        run: |
          cd AnyKernel3/
          zip -q -r "../${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}_${{ env.BUILDDATE }}.zip" *

      - name: "Upload Artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}_${{ env.BUILDDATE }}"
          path: |
            ${{ env.OUT_DIR }}/arch/${{ steps.generate-args.outputs.ARCH }}/boot/Image
            ${{ env.OUT_DIR }}/arch/${{ steps.generate-args.outputs.ARCH }}/boot/Image.gz-dtb
            ${{ env.OUT_DIR }}/arch/${{ steps.generate-args.outputs.ARCH }}/boot/dtb
            ${{ env.OUT_DIR }}/arch/${{ steps.generate-args.outputs.ARCH }}/boot/dtbo.img
            ${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}_${{ env.BUILDDATE }}.zip
          if-no-files-found: ignore
          retention-days: 7

      - name: "Create GitHub Release"
        if: ${{ env.USE_ANYKERNEL == 'true' && env.RELEASE_ENABLED == 'true' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.BUILDDATE }}.${{ github.run_number }}
          files: "${{ env.WORKSPACE }}/${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}_${{ env.BUILDDATE }}.zip"
          generate_release_notes: true

